import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:get/get.dart';
import 'package:lottie/lottie.dart';
import 'package:travelapp_flutter/core/helpers/service_locator.dart';
import 'package:travelapp_flutter/core/utils/styles.dart';
import 'package:travelapp_flutter/core/widgets/back_button.dart';
import 'package:travelapp_flutter/core/widgets/custom_button.dart';
import 'package:travelapp_flutter/core/widgets/custom_loading.dart';
import 'package:travelapp_flutter/core/widgets/failure_page.dart';
import 'package:travelapp_flutter/features/organizing_trip/data/repos/organizing_trip_repo_impl.dart';
import 'package:travelapp_flutter/features/organizing_trip/presentation/view_model/share_trip_cubit/share_trip_cubit.dart';
import 'package:travelapp_flutter/features/organizing_trip/presentation/view_model/share_trip_cubit/share_trip_state.dart';

class ShareTripPage extends StatelessWidget {
  const ShareTripPage({super.key, required this.id});
  final String id;
  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      create: (context) => ShareTripCubit(getIt.get<OrganizingTripImpl>()),
      child: Scaffold(
        appBar: AppBar(
          leading: const CustomBackButton(),
        ),
        body: BlocConsumer<ShareTripCubit, ShareTripState>(
          listener: (BuildContext context, ShareTripState state) {
            if (state is ShareTripFailure) {
              Get.to(
                () => FailurePage(
                  error: state.failure,
                  onPressed: () {},
                ),
              );
            }
          },
          builder: (context, state) {
            if (state is ShareTripLoading) {
              return const CustomLoading();
            } else if (state is ShareTripSuccess) {
              return Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  SizedBox(
                    width: MediaQuery.of(context).size.width,
                    child: Lottie.asset(
                      'assets/animations/check.json',
                      repeat: false,
                      height: 280,
                      fit: BoxFit.fitHeight,
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.symmetric(vertical: 30),
                    child: Text(
                      'Shared succefully \n Thank you for your acceptance',
                      textAlign: TextAlign.center,
                      style: TextStyle(fontSize: 17, color: Colors.grey[600]),
                    ),
                  ),
                ],
              );
            } else {
              return Padding(
                padding: const EdgeInsets.symmetric(horizontal: 20),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Padding(
                      padding: const EdgeInsets.fromLTRB(0, 10, 0, 60),
                      child: Text(
                        'Share your experience',
                        style: Styles.heading2,
                      ),
                    ),
                    SizedBox(
                      width: MediaQuery.of(context).size.width,
                      child: Lottie.asset(
                        'assets/animations/share.json',
                        height: 280,
                        fit: BoxFit.fitHeight,
                      ),
                    ),
                    Padding(
                      padding: const EdgeInsets.symmetric(vertical: 30),
                      child: Text(
                        'Hope you enjoyed your journey with us ! \n Would you like to share your schedule to give other people suggestions ? \n it will be an autogenerated schedule',
                        textAlign: TextAlign.center,
                        style: TextStyle(fontSize: 17, color: Colors.grey[600]),
                      ),
                    ),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                      children: [
                        SizedBox(
                          width: 150,
                          height: 60,
                          child: CustomButton(
                            onPressed: () {
                              Get.back();
                            },
                            label: 'No',
                            color: Colors.grey,
                          ),
                        ),
                        SizedBox(
                          width: 150,
                          height: 60,
                          child: CustomButton(
                            onPressed: () async {
                              await BlocProvider.of<ShareTripCubit>(context)
                                  .shareTrip(tripId: id);
                            },
                            label: 'Yes sure',
                          ),
                        ),
                      ],
                    )
                  ],
                ),
              );
            }
          },
        ),
      ),
    );
  }
}
